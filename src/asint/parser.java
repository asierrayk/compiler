
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package asint;

import java.util.LinkedList;
import tree.*;
import tree.asignacion.*;
import tree.declaracion.*;
import tree.expresion.*;
import tree.expresion.binaria.*;
import tree.expresion.unaria.*;
import tree.flujo.*;
import tree.flujo.multiopcion.*;
import tree.tipos.*;
import tree.valores.*;
import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\006" +
    "\000\002\004\010\000\002\004\007\000\002\004\007\000" +
    "\002\004\011\000\002\004\007\000\002\004\007\000\002" +
    "\004\006\000\002\004\006\000\002\004\005\000\002\004" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\006\000\002\010\006\000\002\010\007\000" +
    "\002\010\005\000\002\010\006\000\002\011\005\000\002" +
    "\011\002\000\002\006\007\000\002\006\006\000\002\005" +
    "\004\000\002\005\002\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\022\004\000\002\022\003\000\002" +
    "\015\004\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\017\005\000\002\017\003\000" +
    "\002\024\003\000\002\024\003\000\002\020\005\000\002" +
    "\020\003\000\002\025\003\000\002\025\003\000\002\021" +
    "\005\000\002\021\006\000\002\021\005\000\002\021\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\004\000\002\027" +
    "\003\000\002\027\007\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\032\003\015\026\022\032\017\035\005\043" +
    "\014\044\020\050\010\051\012\053\024\061\007\062\006" +
    "\065\004\001\002\000\100\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\030\ufff1\034\ufff1\036\ufff1\040\ufff1\041\ufff1" +
    "\052\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\063" +
    "\ufff1\064\ufff1\001\002\000\004\061\205\001\002\000\100" +
    "\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\030\ufff0\034" +
    "\ufff0\036\ufff0\040\ufff0\041\ufff0\052\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\063\ufff0\064\ufff0\001\002\000" +
    "\012\011\uffef\014\uffbe\042\uffbe\061\uffef\001\002\000\004" +
    "\061\200\001\002\000\004\002\177\001\002\000\004\061" +
    "\030\001\002\000\034\002\001\003\015\026\022\032\017" +
    "\035\005\043\014\044\020\050\010\051\012\053\024\061" +
    "\007\062\006\065\004\001\002\000\004\061\160\001\002" +
    "\000\050\002\ufff2\003\ufff2\026\ufff2\027\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\035\ufff2\037\ufff2\043\ufff2\044\ufff2\047\ufff2" +
    "\050\ufff2\051\ufff2\053\ufff2\054\ufff2\061\ufff2\062\ufff2\065" +
    "\ufff2\001\002\000\006\011\121\061\156\001\002\000\032" +
    "\004\033\005\042\006\044\007\041\013\043\052\027\056" +
    "\050\057\031\060\046\061\030\063\035\064\026\001\002" +
    "\000\010\061\120\062\006\065\004\001\002\000\050\002" +
    "\ufffe\003\ufffe\026\ufffe\027\ufffe\031\ufffe\032\ufffe\033\ufffe" +
    "\035\ufffe\037\ufffe\043\ufffe\044\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\053\ufffe\054\ufffe\061\ufffe\062\ufffe\065\ufffe\001\002" +
    "\000\032\004\033\005\042\006\044\007\041\013\043\052" +
    "\027\056\050\057\031\060\046\061\030\063\035\064\026" +
    "\001\002\000\006\014\135\042\071\001\002\000\032\004" +
    "\033\005\042\006\044\007\041\013\043\052\027\056\050" +
    "\057\031\060\046\061\030\063\035\064\026\001\002\000" +
    "\006\036\124\041\075\001\002\000\076\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\030\uffc2\034\uffc2\036\uffc2\040\uffc2\041" +
    "\uffc2\052\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\063\uffc2\064\uffc2\001\002\000\004\056\116\001\002\000" +
    "\104\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\012\uffbe" +
    "\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\030\uffbe\034\uffbe" +
    "\036\uffbe\040\uffbe\041\uffbe\042\uffbe\052\uffbe\055\uffbe\056" +
    "\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\001\002\000\076\004\uffc3\005\uffc3\006\uffc3\007" +
    "\uffc3\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\030\uffc3\034\uffc3\036\uffc3\040\uffc3\041\uffc3\052\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\064" +
    "\uffc3\001\002\000\052\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\021\uffe2\030\uffe2\034\uffe2\036" +
    "\uffe2\040\100\041\uffe2\052\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\063\uffe2\064\uffe2\001\002\000\076\004\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\030\uffc4\034\uffc4\036\uffc4\040\uffc4" +
    "\041\uffc4\052\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\056\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\021" +
    "\uffde\030\uffde\034\uffde\036\uffde\040\uffde\041\uffde\052\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\063\uffde\064" +
    "\uffde\001\002\000\076\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\030\uffc1\034\uffc1\036\uffc1\040\uffc1\041\uffc1\052\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\063\uffc1\064\uffc1" +
    "\001\002\000\056\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\012\uffe0\013\uffe0\014\104\021\uffe0\030\uffe0\034\uffe0" +
    "\036\uffe0\040\uffe0\041\uffe0\052\uffe0\055\103\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\063\uffe0\064\uffe0\001\002\000\076" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\030\uffce\034\uffce\036" +
    "\uffce\040\uffce\041\uffce\052\uffce\055\uffce\056\uffce\057\uffce" +
    "\060\uffce\061\uffce\063\uffce\064\uffce\001\002\000\076\004" +
    "\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\030\uffc8\034\uffc8\036\uffc8" +
    "\040\uffc8\041\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\063\uffc8\064\uffc8\001\002\000\034\004\033" +
    "\005\042\006\044\007\041\013\043\023\111\052\027\056" +
    "\050\057\031\060\046\061\030\063\035\064\026\001\002" +
    "\000\076\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012" +
    "\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\030\uffc6\034" +
    "\uffc6\036\uffc6\040\uffc6\041\uffc6\052\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\063\uffc6\064\uffc6\001\002\000" +
    "\004\061\030\001\002\000\076\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\030\uffc5\034\uffc5\036\uffc5\040\uffc5\041\uffc5\052" +
    "\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\063\uffc5" +
    "\064\uffc5\001\002\000\076\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\066\025" +
    "\065\030\uffd2\034\uffd2\036\uffd2\040\uffd2\041\uffd2\052\uffd2" +
    "\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\063\uffd2\064" +
    "\uffd2\001\002\000\030\004\033\005\042\006\044\007\041" +
    "\013\043\052\027\056\050\057\031\061\030\063\035\064" +
    "\026\001\002\000\072\004\uffd8\005\uffd8\006\uffd8\007\uffd8" +
    "\010\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017" +
    "\uffd8\020\uffd8\021\uffd8\022\061\023\063\030\uffd8\034\uffd8" +
    "\036\uffd8\040\uffd8\041\uffd8\052\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\060\uffd8\061\uffd8\063\uffd8\064\uffd8\001\002\000\076" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\030\uffc7\034\uffc7\036" +
    "\uffc7\040\uffc7\041\uffc7\052\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\063\uffc7\064\uffc7\001\002\000\100\004" +
    "\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\030\uffc0\034\uffc0\036\uffc0" +
    "\040\uffc0\041\uffc0\042\071\052\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\063\uffc0\064\uffc0\001\002\000\066" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\013" +
    "\uffda\014\uffda\015\055\016\056\017\054\020\053\021\uffda" +
    "\030\uffda\034\uffda\036\uffda\040\uffda\041\uffda\052\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\063\uffda\064\uffda" +
    "\001\002\000\030\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013" +
    "\uffd5\052\uffd5\056\uffd5\057\uffd5\061\uffd5\063\uffd5\064\uffd5" +
    "\001\002\000\030\004\uffd4\005\uffd4\006\uffd4\007\uffd4\013" +
    "\uffd4\052\uffd4\056\uffd4\057\uffd4\061\uffd4\063\uffd4\064\uffd4" +
    "\001\002\000\030\004\uffd6\005\uffd6\006\uffd6\007\uffd6\013" +
    "\uffd6\052\uffd6\056\uffd6\057\uffd6\061\uffd6\063\uffd6\064\uffd6" +
    "\001\002\000\030\004\uffd7\005\uffd7\006\uffd7\007\uffd7\013" +
    "\uffd7\052\uffd7\056\uffd7\057\uffd7\061\uffd7\063\uffd7\064\uffd7" +
    "\001\002\000\030\004\033\005\042\006\044\007\041\013" +
    "\043\052\027\056\050\057\031\061\030\063\035\064\026" +
    "\001\002\000\072\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\061\023\063\030\uffd9\034\uffd9\036" +
    "\uffd9\040\uffd9\041\uffd9\052\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\063\uffd9\064\uffd9\001\002\000\030\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\013\uffd1\052\uffd1\056\uffd1" +
    "\057\uffd1\061\uffd1\063\uffd1\064\uffd1\001\002\000\030\004" +
    "\033\005\042\006\044\007\041\013\043\052\027\056\050" +
    "\057\031\061\030\063\035\064\026\001\002\000\030\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\052\uffd0\056\uffd0" +
    "\057\uffd0\061\uffd0\063\uffd0\064\uffd0\001\002\000\076\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022" +
    "\uffd3\023\uffd3\024\066\025\065\030\uffd3\034\uffd3\036\uffd3" +
    "\040\uffd3\041\uffd3\052\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\063\uffd3\064\uffd3\001\002\000\030\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\013\uffcc\052\uffcc\056\uffcc\057" +
    "\uffcc\061\uffcc\063\uffcc\064\uffcc\001\002\000\030\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\013\uffcd\052\uffcd\056\uffcd\057" +
    "\uffcd\061\uffcd\063\uffcd\064\uffcd\001\002\000\030\004\033" +
    "\005\042\006\044\007\041\013\043\052\027\056\050\057" +
    "\031\061\030\063\035\064\026\001\002\000\076\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\023\uffcf\024\uffcf\025\uffcf\030\uffcf\034\uffcf\036\uffcf\040" +
    "\uffcf\041\uffcf\052\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\063\uffcf\064\uffcf\001\002\000\006\011\072\061" +
    "\073\001\002\000\032\004\033\005\042\006\044\007\041" +
    "\013\043\052\027\056\050\057\031\060\046\061\030\063" +
    "\035\064\026\001\002\000\104\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\030\uffbc\034\uffbc\036\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\052\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc" +
    "\062\uffbc\063\uffbc\064\uffbc\065\uffbc\001\002\000\006\012" +
    "\076\041\075\001\002\000\032\004\033\005\042\006\044" +
    "\007\041\013\043\052\027\056\050\057\031\060\046\061" +
    "\030\063\035\064\026\001\002\000\104\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\030\uffbd\034\uffbd\036\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\052\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\001\002\000" +
    "\052\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\021\uffe3\030\uffe3\034\uffe3\036\uffe3\040\100\041" +
    "\uffe3\052\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\063\uffe3" +
    "\064\uffe3\001\002\000\032\004\033\005\042\006\044\007" +
    "\041\013\043\052\027\056\050\057\031\060\046\061\030" +
    "\063\035\064\026\001\002\000\056\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\104\021\uffe1" +
    "\030\uffe1\034\uffe1\036\uffe1\040\uffe1\041\uffe1\052\uffe1\055" +
    "\103\056\uffe1\057\uffe1\060\uffe1\061\uffe1\063\uffe1\064\uffe1" +
    "\001\002\000\032\004\033\005\042\006\044\007\041\013" +
    "\043\052\027\056\050\057\031\060\046\061\030\063\035" +
    "\064\026\001\002\000\032\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\013\uffdc\052\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc" +
    "\063\uffdc\064\uffdc\001\002\000\004\014\105\001\002\000" +
    "\032\004\uffdd\005\uffdd\006\uffdd\007\uffdd\013\uffdd\052\uffdd" +
    "\056\uffdd\057\uffdd\060\uffdd\061\uffdd\063\uffdd\064\uffdd\001" +
    "\002\000\056\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\021\uffdf\030\uffdf\034\uffdf\036" +
    "\uffdf\040\uffdf\041\uffdf\052\uffdf\055\uffdf\056\uffdf\057\uffdf" +
    "\060\uffdf\061\uffdf\063\uffdf\064\uffdf\001\002\000\066\004" +
    "\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\055\016\056\017\054\020\053\021\uffdb\030" +
    "\uffdb\034\uffdb\036\uffdb\040\uffdb\041\uffdb\052\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\063\uffdb\064\uffdb\001" +
    "\002\000\100\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\030\uffbf" +
    "\034\uffbf\036\uffbf\040\uffbf\041\uffbf\042\071\052\uffbf\055" +
    "\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\064\uffbf" +
    "\001\002\000\032\004\033\005\042\006\044\007\041\013" +
    "\043\052\027\056\050\057\031\060\046\061\030\063\035" +
    "\064\026\001\002\000\006\010\113\041\075\001\002\000" +
    "\076\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb\034\uffcb" +
    "\036\uffcb\040\uffcb\041\uffcb\052\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\063\uffcb\064\uffcb\001\002\000\006" +
    "\010\115\041\075\001\002\000\076\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\030\uffca\034\uffca\036\uffca\040\uffca\041\uffca" +
    "\052\uffca\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\063" +
    "\uffca\064\uffca\001\002\000\010\061\120\062\006\065\004" +
    "\001\002\000\100\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\121\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025" +
    "\uffc9\030\uffc9\034\uffc9\036\uffc9\040\uffc9\041\uffc9\052\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\100\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\030\uffef\034\uffef\036\uffef\040\uffef\041\uffef\052" +
    "\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\063\uffef" +
    "\064\uffef\001\002\000\004\056\122\001\002\000\004\012" +
    "\123\001\002\000\100\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024\uffee" +
    "\025\uffee\030\uffee\034\uffee\036\uffee\040\uffee\041\uffee\052" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\063\uffee" +
    "\064\uffee\001\002\000\004\047\125\001\002\000\032\004" +
    "\033\005\042\006\044\007\041\013\043\052\027\056\050" +
    "\057\031\060\046\061\030\063\035\064\026\001\002\000" +
    "\004\054\127\001\002\000\050\002\ufff6\003\ufff6\026\ufff6" +
    "\027\ufff6\031\ufff6\032\ufff6\033\ufff6\035\ufff6\037\ufff6\043" +
    "\ufff6\044\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6" +
    "\061\ufff6\062\ufff6\065\ufff6\001\002\000\006\030\131\041" +
    "\075\001\002\000\032\003\015\026\022\032\017\035\005" +
    "\043\014\044\020\050\010\051\012\053\024\061\007\062" +
    "\006\065\004\001\002\000\036\003\015\026\022\032\017" +
    "\035\005\043\014\044\020\047\125\050\010\051\012\053" +
    "\024\054\uffe6\061\007\062\006\065\004\001\002\000\004" +
    "\054\uffe7\001\002\000\050\002\uffff\003\uffff\026\uffff\027" +
    "\uffff\031\uffff\032\uffff\033\uffff\035\uffff\037\uffff\043\uffff" +
    "\044\uffff\047\uffff\050\uffff\051\uffff\053\uffff\054\uffff\061" +
    "\uffff\062\uffff\065\uffff\001\002\000\032\004\033\005\042" +
    "\006\044\007\041\013\043\052\027\056\050\057\031\060" +
    "\046\061\030\063\035\064\026\001\002\000\006\021\137" +
    "\041\075\001\002\000\050\002\ufff4\003\ufff4\026\ufff4\027" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\035\ufff4\037\ufff4\043\ufff4" +
    "\044\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\054\ufff4\061" +
    "\ufff4\062\ufff4\065\ufff4\001\002\000\006\030\141\041\075" +
    "\001\002\000\032\003\015\026\022\032\017\035\005\043" +
    "\014\044\020\050\010\051\012\053\024\061\007\062\006" +
    "\065\004\001\002\000\036\003\015\026\022\027\143\031" +
    "\144\032\017\035\005\043\014\044\020\050\010\051\012" +
    "\053\024\061\007\062\006\065\004\001\002\000\050\002" +
    "\ufff9\003\ufff9\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\035\ufff9\037\ufff9\043\ufff9\044\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\053\ufff9\054\ufff9\061\ufff9\062\ufff9\065\ufff9\001\002" +
    "\000\032\003\015\026\022\032\017\035\005\043\014\044" +
    "\020\050\010\051\012\053\024\061\007\062\006\065\004" +
    "\001\002\000\034\003\015\026\022\027\146\032\017\035" +
    "\005\043\014\044\020\050\010\051\012\053\024\061\007" +
    "\062\006\065\004\001\002\000\050\002\ufff8\003\ufff8\026" +
    "\ufff8\027\ufff8\031\ufff8\032\ufff8\033\ufff8\035\ufff8\037\ufff8" +
    "\043\ufff8\044\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\054" +
    "\ufff8\061\ufff8\062\ufff8\065\ufff8\001\002\000\006\011\121" +
    "\061\150\001\002\000\004\021\151\001\002\000\050\002" +
    "\ufffc\003\ufffc\026\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\035\ufffc\037\ufffc\043\ufffc\044\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\053\ufffc\054\ufffc\061\ufffc\062\ufffc\065\ufffc\001\002" +
    "\000\006\034\153\041\075\001\002\000\032\003\015\026" +
    "\022\032\017\035\005\043\014\044\020\050\010\051\012" +
    "\053\024\061\007\062\006\065\004\001\002\000\034\003" +
    "\015\026\022\032\017\033\155\035\005\043\014\044\020" +
    "\050\010\051\012\053\024\061\007\062\006\065\004\001" +
    "\002\000\050\002\ufff7\003\ufff7\026\ufff7\027\ufff7\031\ufff7" +
    "\032\ufff7\033\ufff7\035\ufff7\037\ufff7\043\ufff7\044\ufff7\047" +
    "\ufff7\050\ufff7\051\ufff7\053\ufff7\054\ufff7\061\ufff7\062\ufff7" +
    "\065\ufff7\001\002\000\004\021\157\001\002\000\050\002" +
    "\ufffd\003\ufffd\026\ufffd\027\ufffd\031\ufffd\032\ufffd\033\ufffd" +
    "\035\ufffd\037\ufffd\043\ufffd\044\ufffd\047\ufffd\050\ufffd\051" +
    "\ufffd\053\ufffd\054\ufffd\061\ufffd\062\ufffd\065\ufffd\001\002" +
    "\000\004\045\161\001\002\000\012\044\162\061\120\062" +
    "\006\065\004\001\002\000\010\061\120\062\006\065\004" +
    "\001\002\000\004\046\170\001\002\000\006\011\121\061" +
    "\165\001\002\000\004\021\166\001\002\000\014\044\162" +
    "\046\uffeb\061\120\062\006\065\004\001\002\000\004\046" +
    "\uffed\001\002\000\050\002\ufffa\003\ufffa\026\ufffa\027\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\035\ufffa\037\ufffa\043\ufffa\044" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\053\ufffa\054\ufffa\061\ufffa" +
    "\062\ufffa\065\ufffa\001\002\000\006\011\121\061\172\001" +
    "\002\000\004\021\173\001\002\000\014\044\162\046\uffea" +
    "\061\120\062\006\065\004\001\002\000\004\046\uffec\001" +
    "\002\000\006\021\176\042\071\001\002\000\050\002\ufff3" +
    "\003\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\033\ufff3\035" +
    "\ufff3\037\ufff3\043\ufff3\044\ufff3\047\ufff3\050\ufff3\051\ufff3" +
    "\053\ufff3\054\ufff3\061\ufff3\062\ufff3\065\ufff3\001\002\000" +
    "\004\002\000\001\002\000\034\004\033\005\042\006\044" +
    "\007\041\013\043\021\uffe4\052\027\056\050\057\031\060" +
    "\046\061\030\063\035\064\026\001\002\000\036\004\033" +
    "\005\042\006\044\007\041\013\043\021\uffe4\041\075\052" +
    "\027\056\050\057\031\060\046\061\030\063\035\064\026" +
    "\001\002\000\004\021\203\001\002\000\050\002\ufff5\003" +
    "\ufff5\026\ufff5\027\ufff5\031\ufff5\032\ufff5\033\ufff5\035\ufff5" +
    "\037\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5\051\ufff5\053" +
    "\ufff5\054\ufff5\061\ufff5\062\ufff5\065\ufff5\001\002\000\004" +
    "\021\uffe5\001\002\000\012\036\uffe8\061\120\062\006\065" +
    "\004\001\002\000\004\036\212\001\002\000\006\011\121" +
    "\061\030\001\002\000\014\036\uffe8\042\071\061\120\062" +
    "\006\065\004\001\002\000\004\036\uffe9\001\002\000\032" +
    "\003\015\026\022\032\017\035\005\043\014\044\020\050" +
    "\010\051\012\053\024\061\007\062\006\065\004\001\002" +
    "\000\034\003\015\026\022\032\017\035\005\037\214\043" +
    "\014\044\020\050\010\051\012\053\024\061\007\062\006" +
    "\065\004\001\002\000\050\002\ufffb\003\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\032\ufffb\033\ufffb\035\ufffb\037\ufffb\043\ufffb" +
    "\044\ufffb\047\ufffb\050\ufffb\051\ufffb\053\ufffb\054\ufffb\061" +
    "\ufffb\062\ufffb\065\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\212\000\014\002\010\003\012\004\020\007\015\027" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\174\001\001\000\010\004\133\007\015" +
    "\027\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\151\013\031\014\035\015\033" +
    "\016\051\017\046\020\044\021\036\026\037\027\050\001" +
    "\001\000\004\007\146\001\001\000\002\001\001\000\026" +
    "\012\137\013\031\014\035\015\033\016\051\017\046\020" +
    "\044\021\036\026\037\027\050\001\001\000\002\001\001" +
    "\000\026\012\024\013\031\014\035\015\033\016\051\017" +
    "\046\020\044\021\036\026\037\027\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\111" +
    "\013\031\014\035\015\033\016\051\017\046\020\044\021" +
    "\036\026\037\027\050\001\001\000\002\001\001\000\004" +
    "\027\107\001\001\000\002\001\001\000\004\025\066\001" +
    "\001\000\016\016\106\017\046\020\044\021\036\026\037" +
    "\027\050\001\001\000\004\024\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\017\057\020\044\021\036\026\037\027\050" +
    "\001\001\000\004\024\061\001\001\000\002\001\001\000" +
    "\012\020\063\021\036\026\037\027\050\001\001\000\002" +
    "\001\001\000\004\025\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\021\067\026\037\027\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\073\013" +
    "\031\014\035\015\033\016\051\017\046\020\044\021\036" +
    "\026\037\027\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\013\076\014\035\015\033\016\051\017\046" +
    "\020\044\021\036\026\037\027\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\014\100\015\033\016\051" +
    "\017\046\020\044\021\036\026\037\027\050\001\001\000" +
    "\004\022\101\001\001\000\020\015\105\016\051\017\046" +
    "\020\044\021\036\026\037\027\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\056\001\001\000\002\001\001\000\026\012" +
    "\113\013\031\014\035\015\033\016\051\017\046\020\044" +
    "\021\036\026\037\027\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\125\001\001\000\026\012\127\013\031\014\035\015" +
    "\033\016\051\017\046\020\044\021\036\026\037\027\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\131\004\020\007\015\027\022\001\001" +
    "\000\012\004\133\006\132\007\015\027\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\135\013\031" +
    "\014\035\015\033\016\051\017\046\020\044\021\036\026" +
    "\037\027\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\141\004\020\007\015\027" +
    "\022\001\001\000\010\004\133\007\015\027\022\001\001" +
    "\000\002\001\001\000\012\003\144\004\020\007\015\027" +
    "\022\001\001\000\010\004\133\007\015\027\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\153\004\020" +
    "\007\015\027\022\001\001\000\010\004\133\007\015\027" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\163\010\162\001" +
    "\001\000\004\007\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\163\010\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\163\010\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\201\012\200\013\031\014\035\015" +
    "\033\016\051\017\046\020\044\021\036\026\037\027\050" +
    "\001\001\000\030\005\203\012\200\013\031\014\035\015" +
    "\033\016\051\017\046\020\044\021\036\026\037\027\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\206\011\205\001\001\000\002\001\001" +
    "\000\004\027\207\001\001\000\006\007\206\011\210\001" +
    "\001\000\002\001\001\000\012\003\212\004\020\007\015" +
    "\027\022\001\001\000\010\004\133\007\015\027\022\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= Is 
            {
              Programa RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Programa(il,illeft,ilright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Is ::= Is instr 
            {
              LinkedList<Sentencia> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 il.add(i); RESULT = il; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Is",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Is ::= instr 
            {
              LinkedList<Sentencia> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentencia i = (Sentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Sentencia> il = new LinkedList<Sentencia>(); il.add(i); RESULT = il; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Is",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instr ::= tipo IDEN PUNTO 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclVariables(t,i,tleft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instr ::= PUNTERO tipo IDEN PUNTO 
            {
              Sentencia RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new DeclPunteros(t,i,tleft,iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instr ::= FUN IDEN tipos_simple ES Is FFUN 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Declaracion> t = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TipoFuncion(i,t,il,ileft,ilright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instr ::= TIPO IDEN TIENE tipos_init FTIPO 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Declaracion> t = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TipoDefinido(i,t,ileft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instr ::= SI expr ENTONCES Is FSI 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SiEntonces(e,il,eleft,ilright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instr ::= SI expr ENTONCES Is CC Is FSI 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int il1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Sentencia> il1 = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int il2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int il2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il2 = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SiEntoncesCC(e,il1,il2,eleft,il2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instr ::= MIENTRAS expr HACER Is FMIENTRAS 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Mientras(e,il,eleft,ilright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instr ::= MULTIOPCION expr ES opciones FMULTIOPCION 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Opcion> op = (LinkedList<Opcion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Multiopcion(e,op,eleft,opright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instr ::= LLAMAR IDEN listaVars PUNTO 
            {
              Sentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> lv = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Llamada(i,lv,ileft,lvright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instr ::= identificador IGUAL expr PUNTO 
            {
              Sentencia RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identificador v = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AsignaIgual(v,e,vleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instr ::= LIBERA identificador PUNTO 
            {
              Sentencia RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identificador e = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Libera(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instr ::= error 
            {
              Sentencia RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo ::= BOOL 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoBasico(t,tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo ::= ENTERO 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoBasico(t,tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= IDEN 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoRegistro(t,tleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo CAP ENT CCIERRE 
            {
              Tipo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TipoArray(n,t,tleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipos_init ::= tipo IDEN PUNTO tipos_init 
            {
              LinkedList<Declaracion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Declaracion> til = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 til.addFirst(new DeclVariables(t,i,tleft,iright)); RESULT = til; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_init",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipos_init ::= PUNTERO tipo IDEN PUNTO tipos_init 
            {
              LinkedList<Declaracion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Declaracion> til = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 til.addFirst(new DeclPunteros(t,i,tleft,iright)); RESULT = til; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_init",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipos_init ::= tipo IDEN PUNTO 
            {
              LinkedList<Declaracion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Declaracion> til = new LinkedList<Declaracion>(); til.add(new DeclVariables(t,i,tleft,tright)); RESULT = til; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_init",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipos_init ::= PUNTERO tipo IDEN PUNTO 
            {
              LinkedList<Declaracion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Declaracion> til = new LinkedList<Declaracion>(); til.add(new DeclPunteros(t,i,tleft,tright)); RESULT = til; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_init",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipos_simple ::= tipo identificador tipos_simple 
            {
              LinkedList<Declaracion> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identificador i = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Declaracion> til = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 til.addFirst(new DeclVariables(t,i,tleft,iright)); RESULT = til; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_simple",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipos_simple ::= 
            {
              LinkedList<Declaracion> RESULT =null;
		 RESULT = new LinkedList<Declaracion>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipos_simple",7,RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // opciones ::= OPCION expr ENTONCES Is opciones 
            {
              LinkedList<Opcion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int olleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int olright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Opcion> ol = (LinkedList<Opcion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ol.addFirst(new Opcion(e,il,eleft,ilright)); RESULT = ol; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // opciones ::= OPCION expr ENTONCES Is 
            {
              LinkedList<Opcion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Sentencia> il = (LinkedList<Sentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Opcion> ol = new LinkedList<Opcion>(); ol.add(new Opcion(e,il,illeft,ilright)); RESULT = ol; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaVars ::= expr listaVars 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> lv = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lv.addFirst(e); RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVars",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaVars ::= 
            {
              LinkedList<Expresion> RESULT =null;
		 RESULT = new LinkedList<Expresion>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaVars",3,RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr O expr_and 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Disyuncion(e1,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr_and 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_and ::= expr_and Y expr_igualdad 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Conjuncion(e1,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_and ::= expr_igualdad 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_and",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_igualdad ::= expr_igualdad op_igualdad expr_neg 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expresion.Operation(e1,op,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_igualdad",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_igualdad ::= expr_neg 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_igualdad",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // op_igualdad ::= IGUAL IGUAL 
            {
              String RESULT =null;
		 RESULT = "igual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_igualdad",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_igualdad ::= DISTINCT 
            {
              String RESULT =null;
		 RESULT = "distinct"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_igualdad",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_neg ::= NO expr_orden 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new No(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_neg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_neg ::= expr_orden 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_neg",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_orden ::= expr_orden op_orden expr_adicion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expresion.Operation(e1,op,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_orden",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_orden ::= expr_adicion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_orden",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_orden ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = "mayor"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_orden",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_orden ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "menor"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_orden",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_orden ::= MAYOROIGUAL 
            {
              String RESULT =null;
		 RESULT = "mayoroigual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_orden",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_orden ::= MENOROIGUAL 
            {
              String RESULT =null;
		 RESULT = "menoroigual"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_orden",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr_adicion ::= expr_adicion op_adicion expr_multiplicacion 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expresion.Operation(e1,op,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_adicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_adicion ::= expr_multiplicacion 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_adicion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_adicion ::= MAS 
            {
              String RESULT =null;
		 RESULT = "mas"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_adicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_adicion ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "menos"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_adicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_multiplicacion ::= expr_multiplicacion op_multiplicacion expr_primaria 
            {
              Expresion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e1 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e2 = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Expresion.Operation(e1,op,e2,e1left,e2right); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_multiplicacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_multiplicacion ::= expr_primaria 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_multiplicacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_multiplicacion ::= POR 
            {
              String RESULT =null;
		 RESULT = "por"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_multiplicacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_multiplicacion ::= DIV 
            {
              String RESULT =null;
		 RESULT = "division"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_multiplicacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_primaria ::= PAP expr PCIERRE 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_primaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_primaria ::= PAP MENOS expr PCIERRE 
            {
              Expresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Negativo(e,eleft,eright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_primaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_primaria ::= RESERVA ENT tipo 
            {
              Expresion RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Reserva(n,t,nleft,tright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_primaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_primaria ::= value 
            {
              Expresion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Valor v = (Valor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_primaria",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // value ::= ENT 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entero(n,nleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // value ::= BIN 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Binario(n,nleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // value ::= OCT 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Octal(n,nleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // value ::= HEX 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Hexadecimal(n,nleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // value ::= CERO 
            {
              Valor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entero(n,nleft,nright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // value ::= CIERTO 
            {
              Valor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bool(b,bleft,bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // value ::= FALSO 
            {
              Valor RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bool(b,bleft,bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // value ::= identificador 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identificador i = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // value ::= DIR identificador 
            {
              Valor RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identificador i = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Puntero(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("value",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // identificador ::= IDEN 
            {
              Identificador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identificador(i, ileft, iright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // identificador ::= identificador FLECHA CAP expr CCIERRE 
            {
              Identificador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identificador i = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 i.addParam(e); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // identificador ::= identificador FLECHA IDEN 
            {
              Identificador RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identificador i = (Identificador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 i.addParam(id); RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
